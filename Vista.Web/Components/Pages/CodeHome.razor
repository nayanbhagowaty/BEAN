@page "/codehome"
@using Vista.Web.Service
@using Markdig
@rendermode InteractiveServer
@inject ChatApiClient chatApi
<style>
    .markdown-content {
        font-family: Arial, sans-serif;
        line-height: 1.6;
    }

        .markdown-content h1,
        .markdown-content h2,
        .markdown-content h3 {
            border-bottom: 1px solid #eaecef;
            padding-bottom: 0.3em;
        }

        .markdown-content p {
            margin: 0.5em 0;
        }

        .markdown-content code {
            background-color: #f6f8fa;
            border-radius: 3px;
            padding: 0.2em 0.4em;
        }

</style>
<EditForm Model="@AIRequest" FormName="chatbot">
    <div class="searchArea">
        <button @onclick="GetAPIResponse"> Submit </button>
        <div class="inputDiv">
            <InputText class="form-control" @bind-Value="@AIRequest.Request" placeholder="Ask me anything.." />
        </div>
    </div>
    <div class="searchResult">
        <InputTextArea class="form-control" style="height:750px" @bind-Value="@AIRequest.Response" placeholder="AI will respond here..." readonly />
    </div>
</EditForm>
<div class="markdown-content">
    @((MarkupString)AIRequest.Response)
</div>
@inject ChatService chatService
@code {
    Message AIRequest = new();
    public async Task GetAPIResponse()
    {
        try
        {
            AIRequest.Response = "";
            var response = await chatApi.GetCodeStreamAsync(AIRequest.Request);
            var stream = await response.Content.ReadAsStreamAsync();

            using var reader = new StreamReader(stream);
            while (await reader.ReadLineAsync() is { } line)
            {
                if (line.StartsWith("data:"))
                {
                    var eventData = line.Substring(5).Trim();
                    var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
                    AIRequest.Response += Markdown.ToHtml(eventData, pipeline);
                    // AIRequest.Response += " " + eventData;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            AIRequest.Response += ex.ToString();
        }
    }
    class Message
    {
        public string Request { get; set; }
        public string Response { get; set; }
    }
}
